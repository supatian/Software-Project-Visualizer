{"nodes" : [{"id" : 0, "x" : 495, "y" : 144, "width" : 150, "height" : 100, "txt" : "VisualGameObject\n\nThe base class for all elements that appear in the game.","src" : "/**\n    The base class for all elements that appear in the game.\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction VisualGameObject()\n{\n    /**\n        The image that will be displayed by this object\n        @type Image\n    */\n    this.image = null;\n    \n    /**\n        Draws this element to the back buffer\n        @param dt Time in seconds since the last frame\n        @param context The context to draw to\n        @param xScroll The global scrolling value of the x axis  \n        @param yScroll The global scrolling value of the y axis  \n    */\n    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        context.drawImage(this.image, this.x - xScroll, this.y - yScroll);\n    }\n    \n    /**\n        Initialises this object\n        @param image The image to be displayed\n        @param x The position on the X axis\n        @param y The position on the Y axis\n        @param z The depth\n    */\n    this.startupVisualGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)\n    {\n        this.startupGameObject(x, y, z);\n        this.image = image;\n        return this;\n    }\n    \n    /**\n        Clean this object up\n    */\n    this.shutdownVisualGameObject = function()\n    {\n        this.image = null;\n        this.shutdownGameObject();\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownVisualGameObject();\n    }\n\n    this.collisionArea = function()\n    {\n        return new Rectangle().startupRectangle(this.x, this.y, this.image.width, this.image.height);\n    }\n}\nVisualGameObject.prototype = new GameObject;"},{"id" : 1, "x" : 494, "y" : 346, "width" : 150, "height" : 100, "txt" : "AnimatedGameObject","src" : "/**\n    Displays an animated Game Object\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction AnimatedGameObject()\n{\n    /**\n        Defines the current frame that is to be rendered\n        @type Number\n     */\n    this.currentFrame = 0;\n    /**\n        Defines the frames per second of the animation\n        @type Number\n     */\n    this.timeBetweenFrames = 0;\n    /**\n        The number of individual frames held in the image\n        @type Number\n     */\n    /**\n        Time until the next frame\n        @type number\n     */\n    this.timeSinceLastFrame = 0;\n    /**\n        The width of each individual frame\n        @type Number\n     */\n    this.frameWidth = 0;\n\n    /**\n        Initialises this object\n        @param image The image to be displayed\n        @param x The position on the X axis\n        @param y The position on the Y axis\n        @param z The depth\n        @param frameCount The number of animation frames in the image\n        @param fps The frames per second to animate this object at\n    */\n    this.startupAnimatedGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)\n    {\n        if (frameCount <= 0) throw \"framecount can not be <= 0\";\n        if (fps <= 0) throw \"fps can not be <= 0\"\n\n        this.startupVisualGameObject(image, x, y, z);\n        this.currentFrame = 0;\n        this.frameCount = frameCount;\n        this.timeBetweenFrames = 1/fps;\n        this.timeSinceLastFrame = this.timeBetweenFrames;\n        this.frameWidth = this.image.width / this.frameCount;\n\n        return this;\n    }\n\n    this.setAnimation = function(/**Image*/ image, /**Number*/ frameCount, /**Number*/ fps)\n    {\n        if (frameCount <= 0) throw \"framecount can not be <= 0\";\n        if (fps <= 0) throw \"fps can not be <= 0\"\n\n        this.image = image;\n        this.currentFrame = 0;\n        this.frameCount = frameCount;\n        this.timeBetweenFrames = 1/fps;\n        this.timeSinceLastFrame = this.timeBetweenFrames;\n        this.frameWidth = this.image.width / this.frameCount;\n    }\n\n    /**\n        Draws this element to the back buffer\n        @param dt Time in seconds since the last frame\n        @param context The context to draw to\n        @param xScroll The global scrolling value of the x axis\n        @param yScroll The global scrolling value of the y axis\n    */\n    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        var sourceX = this.frameWidth * this.currentFrame;\n        context.drawImage(this.image, sourceX, 0, this.frameWidth, this.image.height, this.x - xScroll, this.y - yScroll, this.frameWidth, this.image.height);\n\n        this.timeSinceLastFrame -= dt;\n        if (this.timeSinceLastFrame <= 0)\n        {\n           this.timeSinceLastFrame = this.timeBetweenFrames;\n           ++this.currentFrame;\n           this.currentFrame %= this.frameCount;\n        }\n    }\n\n    this.shutdownAnimatedGameObject = function()\n    {\n        this.shutdownVisualGameObject();\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownAnimatedGameObject();\n    }\n\n    this.collisionArea = function()\n    {\n        return new Rectangle().startupRectangle(this.x, this.y, this.frameWidth, this.image.height);\n    }\n}\n\nAnimatedGameObject.prototype = new VisualGameObject;"},{"id" : 2, "x" : 274, "y" : 545, "width" : 150, "height" : 100, "txt" : "Player","src" : "/**\n    A class to represent the player on the screen\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction Player()\n{\n    /** The maximum height of the jump\n        @type Number\n     */\n    this.jumpHeight = 64;\n    /** The constant or half PI\n        @type Number\n     */\n    this.halfPI = Math.PI / 2;\n    /** The amount of time to spend in the air when jumping\n        @type Number\n     */\n    this.jumpHangTime = 0.5;\n    /** The speed to progress alone the sine wave that defines\n        the jumping arc\n        @type Number\n     */\n    this.jumpSinWaveSpeed = this.halfPI / this.jumpHangTime;\n    /** The current position on the sine wave that defines the jump arc\n        @type Number\n     */\n    this.jumpSinWavePos = 0;\n    /** The rate to fall at\n        @type Number\n     */\n    this.fallMultiplyer = 1.5;\n    /** True when the player is on the ground, false otherwise\n        @type Boolean\n     */\n    this.grounded = true;\n    /** the players running speed\n        @type Number\n     */\n    this.speed = 75;\n    /** True if the player is moving left, false otherwise\n        @type Boolean\n     */\n    this.left = false;\n    /** True if the player is moving right, false otherwise\n        @type Boolean\n     */\n    this.right = false;\n    /** A reference to the level object\n        @type Level\n    */\n    this.level = null;\n    /** The distance between the player and the edge of the screen\n        @type Number\n     */\n    this.screenBorder = 100;\n\n    /**\n        Initialises this object\n    */\n    this.startupPlayer = function(level)\n    {\n        this.startupAnimatedGameObject(g_ResourceManager.idleLeft, 300, 400 - 48 - 48, 4, 6, 20);\n        this.level = level;\n        return this;\n    }\n\n    /**\n        Called when a key is pressed\n        @param event Event Object\n    */\n    this.keyDown = function(event)\n    {\n        var updateRequired = false;\n\n        // left\n        if (event.keyCode == 37 && !this.left)\n        {\n            this.left = true;\n            updateRequired = true;\n        }\n        // right\n        if (event.keyCode == 39 && !this.right)\n        {\n            this.right = true;\n            updateRequired = true;\n        }\n        if (event.keyCode == 32 && this.grounded)\n        {\n            this.grounded = false;\n            this.jumpSinWavePos = 0;\n        }\n\n        if (updateRequired)\n            this.updateAnimation();\n\n    }\n\n    /**\n        Called when a key is pressed\n        @param event Event Object\n    */\n    this.keyUp = function(event)\n    {\n        // left\n        if (event.keyCode == 37)\n        {\n            this.left = false;\n            this.setAnimation(g_ResourceManager.idleLeft, 6, 20);\n        }\n        // right\n        if (event.keyCode == 39)\n        {\n            this.right = false;\n            this.setAnimation(g_ResourceManager.idleRight, 6, 20);\n        }\n\n        this.updateAnimation();\n    }\n\n    /**\n        Updates the current animation depending on the movement\n        of the player. This accounts for the fact that both\n        the left and right arrow keys can be pressed at the\n        same time.\n    */\n    this.updateAnimation = function()\n    {\n       if (this.right && this.left)\n            this.setAnimation(g_ResourceManager.idleLeft, 6, 20);\n        else if (this.right)\n            this.setAnimation(g_ResourceManager.runRight, 12, 20);\n        else if (this.left)\n            this.setAnimation(g_ResourceManager.runLeft, 12, 20);\n    }\n\n    /**\n        Updates the object\n        @param dt The time since the last frame in seconds\n        @param context The drawing context\n        @param xScroll The global scrolling value of the x axis\n        @param yScroll The global scrolling value of the y axis\n    */\n    this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        if (this.left)\n            this.x -= this.speed * dt;\n        if (this.right)\n            this.x += this.speed * dt;\n\n        // XOR operation (JavaScript does not have a native XOR operator)\n        // only test for a collision if the player is moving left or right (and not trying to do both at\n        // the same time)\n        if ((this.right || this.left) && !(this.left && this.right))\n        {\n            // this will be true until the player is no longer colliding\n            var collision = false;\n            // the player may have to be pushed back through several block stacks (especially if the\n            // frame rate is very slow)\n            do\n            {\n                // the current position of the player (test the left side if running left\n                // and the right side if running right)\n                var xPos = this.left ? this.x : this.x + this.frameWidth;\n                // the index of stack of blocks that the player is standing on/in\n                var currentBlock = this.level.currentBlock(xPos);\n                // the height of the stack of blocks that the player is standing on/in\n                var groundHeight = this.level.groundHeight(currentBlock);\n                // the height of the player (we need the height from the ground up,\n                // whereas the this.y value represents the position of the player\n                // from the \"sky\" down).\n                var playerHeight = context.canvas.height - (this.y + this.image.height);\n                // if the player is not higher than the stack of blocks, it must be colliding\n                if (playerHeight  < groundHeight)\n                {\n                    collision = true;\n                    // we are moving right, so push the player left\n                    if (this.right)\n                        this.x = this.level.blockWidth * currentBlock - this.frameWidth - 1;\n                    // we are moving left, push the player right\n                    else\n                        this.x = this.level.blockWidth * (currentBlock + 1);\n                }\n                else\n                {\n                    collision = false;\n                }\n            }  while (collision)\n        }\n\n        // keep the player bound to the level\n        if (this.x > this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1)\n            this.x = this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1;\n        if (this.x > context.canvas.width - this.frameWidth + xScroll -  this.screenBorder)\n            g_GameObjectManager.xScroll = this.x - (context.canvas.width - this.frameWidth -  this.screenBorder);\n        // modify the xScroll value to keep the player on the screen\n        if (this.x < 0)\n            this.x = 0;\n        if (this.x -  this.screenBorder < xScroll)\n            g_GameObjectManager.xScroll = this.x - this.screenBorder;\n\n        // if the player is jumping or falling, move along the sine wave\n        if (!this.grounded)\n        {\n            // the last position on the sine wave\n            var lastHeight = this.jumpSinWavePos;\n            // the new position on the sine wave\n            this.jumpSinWavePos += this.jumpSinWaveSpeed * dt;\n\n            // we have fallen off the bottom of the sine wave, so continue falling\n            // at a predetermined speed\n            if (this.jumpSinWavePos >= Math.PI)\n                 this.y += this.jumpHeight / this.jumpHangTime * this.fallMultiplyer * dt;\n            // otherwise move along the sine wave\n            else\n                this.y -= (Math.sin(this.jumpSinWavePos) - Math.sin(lastHeight)) * this.jumpHeight;\n        }\n\n        // now that the player has had it's y position changed we need to check for a collision\n        // with the ground below the player. we have to check both the players left and right sides\n        // for a collision with the ground\n\n        // left side\n        var currentBlock1 = this.level.currentBlock(this.x);\n        // right side\n        var currentBlock2 = this.level.currentBlock(this.x + this.frameWidth);\n        // ground height below the left side\n        var groundHeight1 = this.level.groundHeight(currentBlock1);\n        // ground height below the right side\n        var groundHeight2 = this.level.groundHeight(currentBlock2);\n        // the heighest point under the player\n        var maxGroundHeight = groundHeight1 > groundHeight2 ? groundHeight1 : groundHeight2;\n        // the players height (relaitive to the bottom of the screen)\n        var playerHeight = context.canvas.height - (this.y + this.image.height);\n\n        // we have hit the ground\n        if (maxGroundHeight >= playerHeight)\n        {\n            this.y = context.canvas.height - maxGroundHeight - this.image.height;\n            this.grounded = true;\n            this.jumpSinWavePos = 0;\n        }\n        // otherwise we are falling\n        else if (this.grounded)\n        {\n            this.grounded = false;\n            // starting falling down the sine wave (i.e. from the top)\n            this.jumpSinWavePos = this.halfPI;\n        }\n    }\n}\n\nPlayer.prototype = new AnimatedGameObject;"},{"id" : 3, "x" : 496, "y" : 552, "width" : 150, "height" : 100, "txt" : "LevelEndPost","src" : "/**\n    An object that causes the level to end when it it touched\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction LevelEndPost()\n{\n\n    this.startupLevelEndPost = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)\n    {\n        this.startupAnimatedGameObject(image, x, y, z, 4, 10);\n        return this;\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownLevelEndPost();\n    }\n\n    this.shutdownLevelEndPost = function()\n    {\n        this.shutdownAnimatedGameObject();\n    }\n\n    /**\n        Updates the object\n        @param dt The time since the last frame in seconds\n        @param context The drawing context\n        @param xScroll The global scrolling value of the x axis\n        @param yScroll The global scrolling value of the y axis\n    */\n    this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        if (this.collisionArea().intersects(g_player.collisionArea()))\n        {\n            g_ApplicationManager.openMainMenu();\n            this.shutdown();            \n        }\n    }\n}\nLevelEndPost.prototype = new AnimatedGameObject;"},{"id" : 4, "x" : 718, "y" : 567, "width" : 150, "height" : 100, "txt" : "Powerup","src" : "/**\n    Represents a powerup in the game\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction Powerup()\n{\n    /** The value of the powerup\n        @type Number\n     */\n    this.value = 0;\n    /** The current position on the sine wave\n        @type Number\n     */\n    this.sineWavePos = 0;\n    /** How quickly the powerup cycles through the sine wave\n        @type Number\n     */\n    this.bounceTime = 1;\n    /** The speed to increment the sineWavePos value at\n        @type Number\n     */\n    this.bounceSpeed = Math.PI / this.bounceTime;\n    /** The height of the powerups bounce\n        @type Number\n     */\n    this.bounceHeight = 10;\n\n    /**\n        Initialises this object\n        @param value        The value (score) of this powerup\n        @param image        The image to be displayed\n        @param x            The position on the X axis\n        @param y            The position on the Y axis\n        @param z            The depth\n        @param frameCount   The number of animation frames in the image\n        @param fps          The frames per second to animate this object at\n     */\n    this.startupPowerup = function(/**Number*/ value, /**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)\n    {\n        this.startupAnimatedGameObject(image, x, y - this.bounceHeight, z, frameCount, fps);\n        this.value = value;\n        return this;\n    }\n\n    this.shutdownPowerup = function()\n    {\n        this.shutdownAnimatedGameObject();\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownPowerup();\n    }\n\n    /**\n        Updates the object\n        @param dt The time since the last frame in seconds\n        @param context The drawing context\n        @param xScroll The global scrolling value of the x axis\n        @param yScroll The global scrolling value of the y axis\n    */\n    this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        var lastSineWavePos = this.sineWavePos;\n        this.sineWavePos += this.bounceSpeed * dt;\n        this.y += (Math.sin(this.sineWavePos) - Math.sin(lastSineWavePos)) * this.bounceHeight;\n\n        if (this.collisionArea().intersects(g_player.collisionArea()))\n        {\n            this.shutdown();\n            g_score += this.value;\n            g_ApplicationManager.updateScore();\n        }\n    }\n}\n\nPowerup.prototype = new AnimatedGameObject;"}], "connections" : [{"nodeA" : 1, "nodeB" : 0, "conA" : "top", "conB" : "bottom"},{"nodeA" : 2, "nodeB" : 1, "conA" : "top", "conB" : "bottom"},{"nodeA" : 3, "nodeB" : 1, "conA" : "top", "conB" : "bottom"},{"nodeA" : 4, "nodeB" : 1, "conA" : "top", "conB" : "bottom"}]}