{"nodes" : [{"id" : 0, "x" : 541, "y" : 329, "width" : 150, "height" : 100, "txt" : "VisualGameObject","src" : "/**\n    The base class for all elements that appear in the game.\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction VisualGameObject()\n{\n    /**\n        The image that will be displayed by this object\n        @type Image\n    */\n    this.image = null;\n    \n    /**\n        Draws this element to the back buffer\n        @param dt Time in seconds since the last frame\n        @param context The context to draw to\n        @param xScroll The global scrolling value of the x axis  \n        @param yScroll The global scrolling value of the y axis  \n    */\n    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        context.drawImage(this.image, this.x - xScroll, this.y - yScroll);\n    }\n    \n    /**\n        Initialises this object\n        @param image The image to be displayed\n        @param x The position on the X axis\n        @param y The position on the Y axis\n        @param z The depth\n    */\n    this.startupVisualGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)\n    {\n        this.startupGameObject(x, y, z);\n        this.image = image;\n        return this;\n    }\n    \n    /**\n        Clean this object up\n    */\n    this.shutdownVisualGameObject = function()\n    {\n        this.image = null;\n        this.shutdownGameObject();\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownVisualGameObject();\n    }\n\n    this.collisionArea = function()\n    {\n        return new Rectangle().startupRectangle(this.x, this.y, this.image.width, this.image.height);\n    }\n}\nVisualGameObject.prototype = new GameObject;"},{"id" : 1, "x" : 325, "y" : 574, "width" : 150, "height" : 100, "txt" : "AnimatedGameObject","src" : "/**\n    Displays an animated Game Object\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction AnimatedGameObject()\n{\n    /**\n        Defines the current frame that is to be rendered\n        @type Number\n     */\n    this.currentFrame = 0;\n    /**\n        Defines the frames per second of the animation\n        @type Number\n     */\n    this.timeBetweenFrames = 0;\n    /**\n        The number of individual frames held in the image\n        @type Number\n     */\n    /**\n        Time until the next frame\n        @type number\n     */\n    this.timeSinceLastFrame = 0;\n    /**\n        The width of each individual frame\n        @type Number\n     */\n    this.frameWidth = 0;\n\n    /**\n        Initialises this object\n        @param image The image to be displayed\n        @param x The position on the X axis\n        @param y The position on the Y axis\n        @param z The depth\n        @param frameCount The number of animation frames in the image\n        @param fps The frames per second to animate this object at\n    */\n    this.startupAnimatedGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)\n    {\n        if (frameCount <= 0) throw \"framecount can not be <= 0\";\n        if (fps <= 0) throw \"fps can not be <= 0\"\n\n        this.startupVisualGameObject(image, x, y, z);\n        this.currentFrame = 0;\n        this.frameCount = frameCount;\n        this.timeBetweenFrames = 1/fps;\n        this.timeSinceLastFrame = this.timeBetweenFrames;\n        this.frameWidth = this.image.width / this.frameCount;\n\n        return this;\n    }\n\n    this.setAnimation = function(/**Image*/ image, /**Number*/ frameCount, /**Number*/ fps)\n    {\n        if (frameCount <= 0) throw \"framecount can not be <= 0\";\n        if (fps <= 0) throw \"fps can not be <= 0\"\n\n        this.image = image;\n        this.currentFrame = 0;\n        this.frameCount = frameCount;\n        this.timeBetweenFrames = 1/fps;\n        this.timeSinceLastFrame = this.timeBetweenFrames;\n        this.frameWidth = this.image.width / this.frameCount;\n    }\n\n    /**\n        Draws this element to the back buffer\n        @param dt Time in seconds since the last frame\n        @param context The context to draw to\n        @param xScroll The global scrolling value of the x axis\n        @param yScroll The global scrolling value of the y axis\n    */\n    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)\n    {\n        var sourceX = this.frameWidth * this.currentFrame;\n        context.drawImage(this.image, sourceX, 0, this.frameWidth, this.image.height, this.x - xScroll, this.y - yScroll, this.frameWidth, this.image.height);\n\n        this.timeSinceLastFrame -= dt;\n        if (this.timeSinceLastFrame <= 0)\n        {\n           this.timeSinceLastFrame = this.timeBetweenFrames;\n           ++this.currentFrame;\n           this.currentFrame %= this.frameCount;\n        }\n    }\n\n    this.shutdownAnimatedGameObject = function()\n    {\n        this.shutdownVisualGameObject();\n    }\n\n    this.shutdown = function()\n    {\n        this.shutdownAnimatedGameObject();\n    }\n\n    this.collisionArea = function()\n    {\n        return new Rectangle().startupRectangle(this.x, this.y, this.frameWidth, this.image.height);\n    }\n}\n\nAnimatedGameObject.prototype = new VisualGameObject;"},{"id" : 2, "x" : 539, "y" : 121, "width" : 150, "height" : 100, "txt" : "GameObject\n\nThe base class for all elements that appear in the game.","src" : "/**\n    The base class for all elements that appear in the game.\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction GameObject()\n{\n    /** Display depth order. A smaller zOrder means the element is rendered first, and therefor\n        in the background.\n        @type Number\n    */\n    this.zOrder = 0;\n    /**\n        The position on the X axis\n        @type Number\n    */\n    this.x = 0;\n    /**\n        The position on the Y axis\n        @type Number\n    */\n    this.y = 0;\n    \n    /**\n        Initialises the object, and adds it to the list of objects held by the GameObjectManager.\n        @param x        The position on the X axis\n        @param y        The position on the Y axis\n        @param z        The z order of the element (elements in the background have a lower z value)\n    */\n    this.startupGameObject = function(/**Number*/ x, /**Number*/ y, /**Number*/ z)\n    {\n        this.zOrder = z;\n        this.x = x;\n        this.y = y;\n        g_GameObjectManager.addGameObject(this);\n        return this;\n    }\n    \n    /**\n        Cleans up the object, and removes it from the list of objects held by the GameObjectManager.\n    */\n    this.shutdownGameObject = function()\n    {\n        g_GameObjectManager.removeGameObject(this);\n    }\n\n    this.shutdown = function()\n    {\n         this.shutdownGameObject();\n    }\n}"},{"id" : 3, "x" : 540, "y" : 586, "width" : 150, "height" : 100, "txt" : "RepeatingGameObject","src" : "/**\n    A class that display a repeating texture that can optionall be offset in either\n    the x or y axis\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction RepeatingGameObject()\n{\n    /** The width that the final image will take up\n        @type Number\n    */\n    this.width = 0;\n    /** The height that the final image will take up\n        @type Number\n    */\n    this.height = 0;\n    /** How much of the scrollX and scrollY to apply when drawing\n        @type Number\n    */\n    this.scrollFactor = 1;\n    \n    /**\n        Initialises this object\n        @return A reference to the initialised object\n    */\n    this.startupRepeatingGameObject = function(image, x, y, z, width, height, scrollFactor)\n    {\n        this.startupVisualGameObject(image, x, y, z);\n        this.width = width;\n        this.height = height;\n        this.scrollFactor = scrollFactor;\n        return this;\n    }\n    \n    /**\n        Clean this object up\n    */\n    this.shutdownstartupRepeatingGameObject = function()\n    {\n        this.shutdownVisualGameObject();\n    }\n    \n    /**\n        Draws this element to the back buffer\n        @param dt Time in seconds since the last frame\n        @param context The context to draw to\n        @param xScroll The global scrolling value of the x axis  \n        @param yScroll The global scrolling value of the y axis  \n    */\n    this.draw = function(dt, canvas, xScroll, yScroll)\n    {\n        var areaDrawn = [0, 0];\n        \n        for (var y = 0; y < this.height; y += areaDrawn[1])\n        {\n            for (var x = 0; x < this.width; x += areaDrawn[0])\n            {\n                // the top left corner to start drawing the next tile from\n                var newPosition = [this.x + x, this.y + y];\n                // the amount of space left in which to draw\n                var newFillArea = [this.width - x, this.height - y];\n                // the first time around you have to start drawing from the middle of the image\n                // subsequent tiles alwyas get drawn from the top or left\n                var newScrollPosition = [0, 0];\n                if (x==0) newScrollPosition[0] = xScroll * this.scrollFactor;\n                if (y==0) newScrollPosition[1] = yScroll * this.scrollFactor;\n                areaDrawn = this.drawRepeat(canvas, newPosition, newFillArea, newScrollPosition);\n            }\n        }\n    }\n    \n    this.drawRepeat = function(canvas, newPosition, newFillArea, newScrollPosition)\n    {\n        // find where in our repeating texture to start drawing (the top left corner)\n        var xOffset = Math.abs(newScrollPosition[0]) % this.image.width;\n        var yOffset = Math.abs(newScrollPosition[1]) % this.image.height;\n        var left = newScrollPosition[0]<0?this.image.width-xOffset:xOffset;\n        var top = newScrollPosition[1]<0?this.image.height-yOffset:yOffset;\n        var width = newFillArea[0] < this.image.width-left?newFillArea[0]:this.image.width-left;\n        var height = newFillArea[1] < this.image.height-top?newFillArea[1]:this.image.height-top;\n        \n        // draw the image\n        canvas.drawImage(this.image, left, top, width, height, newPosition[0], newPosition[1], width, height);\n        \n        return [width, height];\n    }\n    \n    \n}\nRepeatingGameObject.prototype = new VisualGameObject();"},{"id" : 4, "x" : 754, "y" : 585, "width" : 150, "height" : 100, "txt" : "MainMenu","src" : "/**\n    The main menu screen\n    @author <a href=\"mailto:matthewcasperson@gmail.com\">Matthew Casperson</a>\n    @class\n*/\nfunction MainMenu()\n{\n    this.startupMainMenu = function()\n    {\n        this.startupVisualGameObject(g_ResourceManager.mainmenu, 0, 0, 1);\n        return this;\n    }\n\n    /**\n        Called when a key is pressed\n        @param event Event Object\n    */\n    this.keyDown = function(event)\n    {\n        g_ApplicationManager.startLevel();\n    }\n}\nMainMenu.prototype = new VisualGameObject;"}], "connections" : [{"nodeA" : 1, "nodeB" : 0, "conA" : "top", "conB" : "bottom"},{"nodeA" : 0, "nodeB" : 2, "conA" : "top", "conB" : "bottom"},{"nodeA" : 3, "nodeB" : 0, "conA" : "top", "conB" : "bottom"},{"nodeA" : 4, "nodeB" : 0, "conA" : "top", "conB" : "bottom"}]}