{"nodes" : [{"id" : 0, "x" : 22, "y" : 71, "width" : 278, "height" : 424, "txt" : "<div>/**</div><div>&nbsp; &nbsp; The ApplicationManager is used to manage the application itself.</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function ApplicationManager()</div><div>{</div><div>&nbsp; &nbsp; this.canvasWidth = 0;</div><div>&nbsp; &nbsp; this.canvasHeight = 0;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param canvasWidth &nbsp; &nbsp; &nbsp;The width of the canvas</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param canvasHeight &nbsp; &nbsp; The height of the canvas</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A reference to the initialised object</div><div><br></div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupApplicationManager = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_ApplicationManager = this;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.canvasWidth = canvasWidth;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.canvasHeight = canvasHeight;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.openMainMenu();</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.startLevel = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.shutdownAll();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.level = new Level().startupLevel(this.canvasWidth, this.canvasHeight);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.background3 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background2, 0, 100, 3, 600, 320, 0.75);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.background2 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background1, 0, 100, 2, 600, 320, 0.5);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.background = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background0, 0, 0, 1, 600, 320, 0.25);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_player = new Player().startupPlayer(this.level);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.updateScore();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.openMainMenu = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.shutdownAll();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.xScroll = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.yScroll = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_score = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.mainMenu = new MainMenu().startupMainMenu();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.updateScore = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var score = document.getElementById(\"Score\");</div><div>&nbsp; &nbsp; &nbsp; &nbsp; score.innerHTML = String(g_score);</div><div>&nbsp; &nbsp; }</div><div>}</div>"},{"id" : 1, "x" : 311, "y" : 73, "width" : 292, "height" : 436, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A manager for all the objects in the game</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function GameObjectManager()</div><div>{</div><div>&nbsp; &nbsp; /** An array of game objects&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.gameObjects = new Array();</div><div>&nbsp; &nbsp; /** An array of new game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addedGameObjects = new Array();</div><div>&nbsp; &nbsp; /** An array of removed game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.removedGameObjects = new Array();</div><div>&nbsp; &nbsp; /** The time that the last frame was rendered &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Date</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.lastFrame = new Date().getTime();</div><div>&nbsp; &nbsp; /** The global scrolling value of the x axis &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.xScroll = 0;</div><div>&nbsp; &nbsp; /** The global scrolling value of the y axis &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.yScroll = 0;</div><div>&nbsp; &nbsp; /** A reference to the canvas element &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type HTMLCanvasElement</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.canvas = null;</div><div>&nbsp; &nbsp; /** A reference to the 2D context of the canvas element</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type CanvasRenderingContext2D</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.context2D = null;</div><div>&nbsp; &nbsp; /** A reference to the in-memory canvas used as a back buffer&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type HTMLCanvasElement</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.backBuffer = null;</div><div>&nbsp; &nbsp; /** A reference to the backbuffer 2D context&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type CanvasRenderingContext2D</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.backBufferContext2D = null;</div><div>&nbsp; &nbsp; /** True if the canvas element is supported, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.canvasSupported = false;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** True if the resources supplied to the ResourceManager are all loaded, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.resourcesLoaded = false;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** The current colour of the loading screen</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenCol = 0;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** The direction of the changes to the loading screen colour.</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>1 = colour moving towards white</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>-1 = colour moving topwards balck</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */<span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenColDirection = 1;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** How quickly to change the loading screen colour per second</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenColSpeed = 255;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return A reference to the initialised object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupGameObjectManager = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // set the global pointer to reference this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager = this;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // watch for keyboard events</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.onkeydown = function(event){g_GameObjectManager.keyDown(event);}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.onkeyup = function(event){g_GameObjectManager.keyUp(event);}</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // get references to the canvas elements and their 2D contexts</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.canvas = document.getElementById('canvas');</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // if the this.canvas.getContext function does not exist it is a safe bet that</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the current browser does not support the canvas element.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // in this case we don't go any further, which will save some debuggers (like</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the IE8 debugger) from throwing up a lot of errors.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.canvas.getContext)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.canvasSupported = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D = this.canvas.getContext('2d');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer = document.createElement('canvas');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer.width = this.canvas.width;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer.height = this.canvas.height;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBufferContext2D = this.backBuffer.getContext('2d');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // create a new ResourceManager</div><div>&nbsp; &nbsp; &nbsp; &nbsp; new ResourceManager().startupResourceManager(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [{name: 'runLeft', src: 'run_left.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'runRight', src: 'run_right.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'idleLeft', src: 'idle_left.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'idleRight', src: 'idle_right.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background0', src: 'jsplatformer4_b0.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background1', src: 'jsplatformer4_b1.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background2', src: 'jsplatformer4_b2.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'block', src: 'BlockA0.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'gem', src: 'Gem.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'mainmenu', src: 'mainmenu.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'portal', src: 'portal.png'}]);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // use setInterval to call the draw function</div><div>&nbsp; &nbsp; &nbsp; &nbsp; setInterval(function(){g_GameObjectManager.draw();}, SECONDS_BETWEEN_FRAMES);</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this; &nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; The render loop</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.draw = function ()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // calculate the time since the last frame</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var thisFrame = new Date().getTime();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var dt = (thisFrame - this.lastFrame)/1000;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.lastFrame = thisFrame;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (!this.resourcesLoaded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var numLoaded = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (i = 0; i &lt; g_ResourceManager.imageProperties.length; ++i)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (g_ResourceManager[g_ResourceManager.imageProperties[i]].complete)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ++numLoaded;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ( numLoaded == g_ResourceManager.imageProperties.length )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // create a new ApplicationManager</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new ApplicationManager().startupApplicationManager(this.canvas.width, this.canvas.height);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.resourcesLoaded = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol += this.loadingScreenColDirection * this.loadingScreenColSpeed * dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.loadingScreenCol &gt; 255)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol = 255;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenColDirection = -1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if (this.loadingScreenCol &lt; 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenColDirection = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.fillStyle = \"rgb(\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \")\";</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.fillRect (0, 0, this.canvas.width, this.canvas.height);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // clear the drawing contexts</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.canvasSupported &amp;&amp; this.resourcesLoaded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBufferContext2D.clearRect(0, 0, this.backBuffer.width, this.backBuffer.height);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.addNewGameObjects();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.removeOldGameObjects();</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // first update all the game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].update)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].update(dt, this.backBufferContext2D, this.xScroll, this.yScroll);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // then draw the game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].draw)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].draw(dt, this.backBufferContext2D, this.xScroll, this.yScroll);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // copy the back buffer to the displayed canvas</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.drawImage(this.backBuffer, 0, 0);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; };</div><div><br></div><div>&nbsp; &nbsp; this.shutdownAll = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].shutdown)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].shutdown();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.removeOldGameObjects();</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Adds a new GameObject to the gameObjects collection</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param gameObject The object to add</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addGameObject = function(gameObject)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addedGameObjects.push(gameObject);</div><div>&nbsp; &nbsp; };</div><div><br></div><div>&nbsp; &nbsp; this.addNewGameObjects = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.addedGameObjects.length != 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.addedGameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.push(this.addedGameObjects[x]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.addedGameObjects.clear();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.sort(function(a,b){return a.zOrder - b.zOrder;});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Removes a GameObject from the gameObjects collection</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param gameObject The object to remove</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.removeGameObject = function(gameObject)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.removedGameObjects.push(gameObject);</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.removeOldGameObjects = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.removedGameObjects.length != 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.removedGameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.removeObject(this.removedGameObjects[x]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.removedGameObjects.clear();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.keyDown = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].keyDown)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].keyDown(event);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.keyUp = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].keyUp)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].keyUp(event);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div>"},{"id" : 2, "x" : 622, "y" : 68, "width" : 200, "height" : 300, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A class to represent the level</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function Level()</div><div>{</div><div>&nbsp; &nbsp; this.blocks = new Array();</div><div>&nbsp; &nbsp; this.powerups = new Object;</div><div>&nbsp; &nbsp; this.blockWidth = 64;</div><div>&nbsp; &nbsp; this.blockHeight = 48;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupLevel = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[0] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[1] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[2] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[3] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[4] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[5] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[6] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[7] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[8] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[9] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[10] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[11] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[12] = 4;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[13] = 5;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[14] = 4;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[15] = 3;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['1'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['6'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['10'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['14'] = 'LevelEndPost';</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addBlocks(canvasWidth, canvasHeight);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addPowerups(canvasWidth, canvasHeight);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Adds the blocks to the screen by creating VisualGameObjects</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addBlocks = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.blocks.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var y = 0; y &lt; this.blocks[x]; ++y)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new VisualGameObject().startupVisualGameObject(g_ResourceManager.block, x * this.blockWidth, canvasHeight - (y + 1) * this.blockHeight, 4);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.addPowerups = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.blocks.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.powerups[x])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var xPosition = x * this.blockWidth + this.blockWidth / 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var yPosition = canvasHeight - this.groundHeight(x);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch(this.powerups[x])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'Gem':</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Powerup().startupPowerup(10, g_ResourceManager.gem, xPosition - g_ResourceManager.gem.width / 2, yPosition - g_ResourceManager.gem.height, 4, 1, 1);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'LevelEndPost':</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new LevelEndPost().startupLevelEndPost(g_ResourceManager.portal, xPosition - g_ResourceManager.portal.width / 2 / 4, yPosition - g_ResourceManager.portal.height, 4);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return &nbsp; &nbsp; The block under the specified x position</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param x &nbsp; &nbsp;The x position to test</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.currentBlock = function(x)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return parseInt( x / this.blockWidth);</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The hieght of the ground under the specified block</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param blockIndex &nbsp; The block number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.groundHeight = function(blockIndex)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (blockIndex &lt; 0 || blockIndex &gt; this.blocks.length) return 0;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this.blocks[blockIndex] * &nbsp;this.blockHeight;</div><div>&nbsp; &nbsp; }</div><div>}</div>"},{"id" : 3, "x" : 857, "y" : 74, "width" : 200, "height" : 300, "txt" : "<div>/**</div><div>&nbsp; &nbsp; The main menu screen</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function MainMenu()</div><div>{</div><div>&nbsp; &nbsp; this.startupMainMenu = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.startupVisualGameObject(g_ResourceManager.mainmenu, 0, 0, 1);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Called when a key is pressed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param event Event Object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.keyDown = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_ApplicationManager.startLevel();</div><div>&nbsp; &nbsp; }</div><div>}</div><div>MainMenu.prototype = new VisualGameObject;</div>"},{"id" : 4, "x" : 65, "y" : 525, "width" : 216, "height" : 323, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A class to represent the player on the screen</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function Player()</div><div>{</div><div>&nbsp; &nbsp; /** The maximum height of the jump</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.jumpHeight = 64;</div><div>&nbsp; &nbsp; /** The constant or half PI</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.halfPI = Math.PI / 2;</div><div>&nbsp; &nbsp; /** The amount of time to spend in the air when jumping</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.jumpHangTime = 0.5;</div><div>&nbsp; &nbsp; /** The speed to progress alone the sine wave that defines</div><div>&nbsp; &nbsp; &nbsp; &nbsp; the jumping arc</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.jumpSinWaveSpeed = this.halfPI / this.jumpHangTime;</div><div>&nbsp; &nbsp; /** The current position on the sine wave that defines the jump arc</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.jumpSinWavePos = 0;</div><div>&nbsp; &nbsp; /** The rate to fall at</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.fallMultiplyer = 1.5;</div><div>&nbsp; &nbsp; /** True when the player is on the ground, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.grounded = true;</div><div>&nbsp; &nbsp; /** the players running speed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.speed = 75;</div><div>&nbsp; &nbsp; /** True if the player is moving left, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.left = false;</div><div>&nbsp; &nbsp; /** True if the player is moving right, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.right = false;</div><div>&nbsp; &nbsp; /** A reference to the level object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Level</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.level = null;</div><div>&nbsp; &nbsp; /** The distance between the player and the edge of the screen</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.screenBorder = 100;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupPlayer = function(level)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.startupAnimatedGameObject(g_ResourceManager.idleLeft, 300, 400 - 48 - 48, 4, 6, 20);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.level = level;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Called when a key is pressed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param event Event Object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.keyDown = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var updateRequired = false;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // left</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (event.keyCode == 37 &amp;&amp; !this.left)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.left = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; updateRequired = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // right</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (event.keyCode == 39 &amp;&amp; !this.right)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.right = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; updateRequired = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (event.keyCode == 32 &amp;&amp; this.grounded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.grounded = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.jumpSinWavePos = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (updateRequired)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.updateAnimation();</div><div><br></div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Called when a key is pressed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param event Event Object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.keyUp = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // left</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (event.keyCode == 37)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.left = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setAnimation(g_ResourceManager.idleLeft, 6, 20);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // right</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (event.keyCode == 39)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.right = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setAnimation(g_ResourceManager.idleRight, 6, 20);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.updateAnimation();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Updates the current animation depending on the movement</div><div>&nbsp; &nbsp; &nbsp; &nbsp; of the player. This accounts for the fact that both</div><div>&nbsp; &nbsp; &nbsp; &nbsp; the left and right arrow keys can be pressed at the</div><div>&nbsp; &nbsp; &nbsp; &nbsp; same time.</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.updateAnimation = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp;if (this.right &amp;&amp; this.left)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setAnimation(g_ResourceManager.idleLeft, 6, 20);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else if (this.right)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setAnimation(g_ResourceManager.runRight, 12, 20);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else if (this.left)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setAnimation(g_ResourceManager.runLeft, 12, 20);</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Updates the object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param dt The time since the last frame in seconds</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param context The drawing context</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param xScroll The global scrolling value of the x axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param yScroll The global scrolling value of the y axis</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.left)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x -= this.speed * dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.right)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x += this.speed * dt;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // XOR operation (JavaScript does not have a native XOR operator)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // only test for a collision if the player is moving left or right (and not trying to do both at</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the same time)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if ((this.right || this.left) &amp;&amp; !(this.left &amp;&amp; this.right))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // this will be true until the player is no longer colliding</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var collision = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the player may have to be pushed back through several block stacks (especially if the</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // frame rate is very slow)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the current position of the player (test the left side if running left</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // and the right side if running right)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var xPos = this.left ? this.x : this.x + this.frameWidth;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the index of stack of blocks that the player is standing on/in</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var currentBlock = this.level.currentBlock(xPos);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the height of the stack of blocks that the player is standing on/in</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var groundHeight = this.level.groundHeight(currentBlock);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the height of the player (we need the height from the ground up,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // whereas the this.y value represents the position of the player</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // from the \"sky\" down).</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var playerHeight = context.canvas.height - (this.y + this.image.height);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // if the player is not higher than the stack of blocks, it must be colliding</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (playerHeight &nbsp;&lt; groundHeight)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; collision = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // we are moving right, so push the player left</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.right)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = this.level.blockWidth * currentBlock - this.frameWidth - 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // we are moving left, push the player right</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = this.level.blockWidth * (currentBlock + 1);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; collision = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp;while (collision)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // keep the player bound to the level</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.x &gt; this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.x &gt; context.canvas.width - this.frameWidth + xScroll - &nbsp;this.screenBorder)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.xScroll = this.x - (context.canvas.width - this.frameWidth - &nbsp;this.screenBorder);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // modify the xScroll value to keep the player on the screen</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.x &lt; 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.x - &nbsp;this.screenBorder &lt; xScroll)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager.xScroll = this.x - this.screenBorder;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // if the player is jumping or falling, move along the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (!this.grounded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the last position on the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var lastHeight = this.jumpSinWavePos;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the new position on the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.jumpSinWavePos += this.jumpSinWaveSpeed * dt;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // we have fallen off the bottom of the sine wave, so continue falling</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // at a predetermined speed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.jumpSinWavePos &gt;= Math.PI)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.y += this.jumpHeight / this.jumpHangTime * this.fallMultiplyer * dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // otherwise move along the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.y -= (Math.sin(this.jumpSinWavePos) - Math.sin(lastHeight)) * this.jumpHeight;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // now that the player has had it's y position changed we need to check for a collision</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // with the ground below the player. we have to check both the players left and right sides</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // for a collision with the ground</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // left side</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var currentBlock1 = this.level.currentBlock(this.x);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // right side</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var currentBlock2 = this.level.currentBlock(this.x + this.frameWidth);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // ground height below the left side</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var groundHeight1 = this.level.groundHeight(currentBlock1);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // ground height below the right side</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var groundHeight2 = this.level.groundHeight(currentBlock2);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the heighest point under the player</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var maxGroundHeight = groundHeight1 &gt; groundHeight2 ? groundHeight1 : groundHeight2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the players height (relaitive to the bottom of the screen)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var playerHeight = context.canvas.height - (this.y + this.image.height);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // we have hit the ground</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (maxGroundHeight &gt;= playerHeight)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.y = context.canvas.height - maxGroundHeight - this.image.height;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.grounded = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.jumpSinWavePos = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // otherwise we are falling</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else if (this.grounded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.grounded = false;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // starting falling down the sine wave (i.e. from the top)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.jumpSinWavePos = this.halfPI;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div><div><br></div><div>Player.prototype = new AnimatedGameObject;</div>"},{"id" : 5, "x" : 352, "y" : 535, "width" : 244, "height" : 332, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A database for the external resources used by the game</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function ResourceManager()</div><div>{</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** An array of the names of the images supplied to the startupResourceManager</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>function. Since the images are referenced by creating new properties</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>of the ResourceManager class this collection allows a developer to&nbsp;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>know which of the ResourceManager properties are images, and (by&nbsp;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>elimination) those that are not</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@type Array</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>*/</div><div>&nbsp; &nbsp; this.imageProperties = null;</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param images<span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>An array of objects with the name and src properties</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return <span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>A reference to the initialised object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupResourceManager = function(/**Array*/ images)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // set the global variable</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>g_ResourceManager = this;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // initialize internal state.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.imageProperties = new Array();</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // for each image, call preload()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for ( var i = 0; i &lt; images.length; i++ )</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>{</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>// create new Image object and add to array</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>var thisImage = new Image;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>this[images[i].name] = thisImage;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>this.imageProperties.push(images[i].name);</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>// assign the .src property of the Image object</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">            </span>thisImage.src = images[i].src;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>}</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div>}</div>"}], "connections" : []}