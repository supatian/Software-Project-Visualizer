{"nodes" : [{"id" : 0, "x" : 103, "y" : 82, "width" : 200, "height" : 300, "txt" : "<pre style=\"word-wrap: break-word; white-space: pre-wrap; \">/**\n    The ApplicationManager is used to manage the application itself.\n    @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;\n    @class\n*/\nfunction ApplicationManager()\n{\n    this.canvasWidth = 0;\n    this.canvasHeight = 0;\n\n    /**\n        Initialises this object\n        @param canvasWidth      The width of the canvas\n        @param canvasHeight     The height of the canvas\n        @return                 A reference to the initialised object\n\n    */\n    this.startupApplicationManager = function(canvasWidth, canvasHeight)\n    {\n        g_ApplicationManager = this;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n\n        this.openMainMenu();\n\n        return this;\n    }\n\n    this.startLevel = function()\n    {\n        g_GameObjectManager.shutdownAll();\n        this.level = new Level().startupLevel(this.canvasWidth, this.canvasHeight);\n        this.background3 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background2, 0, 100, 3, 600, 320, 0.75);\n        this.background2 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background1, 0, 100, 2, 600, 320, 0.5);\n        this.background = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background0, 0, 0, 1, 600, 320, 0.25);\n        g_player = new Player().startupPlayer(this.level);\n        this.updateScore();\n    }\n\n    this.openMainMenu = function()\n    {\n        g_GameObjectManager.shutdownAll();\n        g_GameObjectManager.xScroll = 0;\n        g_GameObjectManager.yScroll = 0;\n        g_score = 0;\n        this.mainMenu = new MainMenu().startupMainMenu();\n    }\n\n    this.updateScore = function()\n    {\n        var score = document.getElementById(\"Score\");\n        score.innerHTML = String(g_score);\n    }\n}</pre>"},{"id" : 1, "x" : 438, "y" : 120, "width" : 200, "height" : 300, "txt" : "<div>/**</div><div>&nbsp; &nbsp; Represents a powerup in the game</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function Powerup()</div><div>{</div><div>&nbsp; &nbsp; /** The value of the powerup</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.value = 0;</div><div>&nbsp; &nbsp; /** The current position on the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.sineWavePos = 0;</div><div>&nbsp; &nbsp; /** How quickly the powerup cycles through the sine wave</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.bounceTime = 1;</div><div>&nbsp; &nbsp; /** The speed to increment the sineWavePos value at</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.bounceSpeed = Math.PI / this.bounceTime;</div><div>&nbsp; &nbsp; /** The height of the powerups bounce</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.bounceHeight = 10;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param value &nbsp; &nbsp; &nbsp; &nbsp;The value (score) of this powerup</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param image &nbsp; &nbsp; &nbsp; &nbsp;The image to be displayed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param x &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The position on the X axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param y &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The position on the Y axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param z &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The depth</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param frameCount &nbsp; The number of animation frames in the image</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param fps &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The frames per second to animate this object at</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.startupPowerup = function(/**Number*/ value, /**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.startupAnimatedGameObject(image, x, y - this.bounceHeight, z, frameCount, fps);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.value = value;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.shutdownPowerup = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownAnimatedGameObject();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.shutdown = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownPowerup();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Updates the object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param dt The time since the last frame in seconds</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param context The drawing context</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param xScroll The global scrolling value of the x axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param yScroll The global scrolling value of the y axis</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var lastSineWavePos = this.sineWavePos;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.sineWavePos += this.bounceSpeed * dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.y += (Math.sin(this.sineWavePos) - Math.sin(lastSineWavePos)) * this.bounceHeight;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.collisionArea().intersects(g_player.collisionArea()))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.shutdown();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g_score += this.value;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; g_ApplicationManager.updateScore();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div><div><br></div><div>Powerup.prototype = new AnimatedGameObject;</div>"}], "connections" : []}