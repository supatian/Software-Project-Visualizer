{"nodes" : [{"id" : 0, "x" : 364, "y" : 85, "width" : 318, "height" : 457, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A class to represent the level</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function Level()</div><div>{</div><div>&nbsp; &nbsp; this.blocks = new Array();</div><div>&nbsp; &nbsp; this.powerups = new Object;</div><div>&nbsp; &nbsp; this.blockWidth = 64;</div><div>&nbsp; &nbsp; this.blockHeight = 48;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupLevel = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[0] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[1] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[2] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[3] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[4] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[5] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[6] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[7] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[8] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[9] = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[10] = 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[11] = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[12] = 4;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[13] = 5;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[14] = 4;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.blocks[15] = 3;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['1'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['6'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['10'] = 'Gem';</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.powerups['14'] = 'LevelEndPost';</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addBlocks(canvasWidth, canvasHeight);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addPowerups(canvasWidth, canvasHeight);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Adds the blocks to the screen by creating VisualGameObjects</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addBlocks = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.blocks.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var y = 0; y &lt; this.blocks[x]; ++y)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new VisualGameObject().startupVisualGameObject(g_ResourceManager.block, x * this.blockWidth, canvasHeight - (y + 1) * this.blockHeight, 4);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.addPowerups = function(canvasWidth, canvasHeight)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.blocks.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.powerups[x])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var xPosition = x * this.blockWidth + this.blockWidth / 2;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var yPosition = canvasHeight - this.groundHeight(x);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch(this.powerups[x])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'Gem':</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Powerup().startupPowerup(10, g_ResourceManager.gem, xPosition - g_ResourceManager.gem.width / 2, yPosition - g_ResourceManager.gem.height, 4, 1, 1);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'LevelEndPost':</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"highlight\"><span class=\"highlight\"><span class=\"highlight\">new LevelEndPost(</span></span></span>).startupLevelEndPost(g_ResourceManager.portal, xPosition - g_ResourceManager.portal.width / 2 / 4, yPosition - g_ResourceManager.portal.height, 4);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return &nbsp; &nbsp; The block under the specified x position</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param x &nbsp; &nbsp;The x position to test</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.currentBlock = function(x)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return parseInt( x / this.blockWidth);</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The hieght of the ground under the specified block</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param blockIndex &nbsp; The block number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.groundHeight = function(blockIndex)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (blockIndex &lt; 0 || blockIndex &gt; this.blocks.length) return 0;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this.blocks[blockIndex] * &nbsp;this.blockHeight;</div><div>&nbsp; &nbsp; }</div><div>}</div>"}], "connections" : []}