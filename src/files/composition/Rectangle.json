{"nodes" : [{"id" : 0, "x" : 194, "y" : 119, "width" : 434, "height" : 511, "txt" : "<div>/**</div><div>&nbsp; &nbsp; Displays an animated Game Object</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function AnimatedGameObject()</div><div>{</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Defines the current frame that is to be rendered</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.currentFrame = 0;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Defines the frames per second of the animation</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.timeBetweenFrames = 0;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; The number of individual frames held in the image</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Time until the next frame</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.timeSinceLastFrame = 0;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; The width of each individual frame</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; this.frameWidth = 0;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param image The image to be displayed</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param x The position on the X axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param y The position on the Y axis</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param z The depth</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param frameCount The number of animation frames in the image</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param fps The frames per second to animate this object at</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupAnimatedGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (frameCount &lt;= 0) throw \"framecount can not be &lt;= 0\";</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (fps &lt;= 0) throw \"fps can not be &lt;= 0\"</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.startupVisualGameObject(image, x, y, z);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.currentFrame = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.frameCount = frameCount;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.timeBetweenFrames = 1/fps;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.timeSinceLastFrame = this.timeBetweenFrames;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.frameWidth = this.image.width / this.frameCount;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.setAnimation = function(/**Image*/ image, /**Number*/ frameCount, /**Number*/ fps)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (frameCount &lt;= 0) throw \"framecount can not be &lt;= 0\";</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (fps &lt;= 0) throw \"fps can not be &lt;= 0\"</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.image = image;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.currentFrame = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.frameCount = frameCount;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.timeBetweenFrames = 1/fps;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.timeSinceLastFrame = this.timeBetweenFrames;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.frameWidth = this.image.width / this.frameCount;</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Draws this element to the back buffer</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param dt Time in seconds since the last frame</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param context The context to draw to</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param xScroll The global scrolling value of the x axis</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param yScroll The global scrolling value of the y axis</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var sourceX = this.frameWidth * this.currentFrame;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; context.drawImage(this.image, sourceX, 0, this.frameWidth, this.image.height, this.x - xScroll, this.y - yScroll, this.frameWidth, this.image.height);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.timeSinceLastFrame -= dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.timeSinceLastFrame &lt;= 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.timeSinceLastFrame = this.timeBetweenFrames;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;++this.currentFrame;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.currentFrame %= this.frameCount;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.shutdownAnimatedGameObject = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownVisualGameObject();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.shutdown = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownAnimatedGameObject();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.collisionArea = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return new Rectangle().startupRectangle(this.x, this.y, this.frameWidth, this.image.height);</div><div>&nbsp; &nbsp; }</div><div>}</div><div><br></div><div>AnimatedGameObject.prototype = new VisualGameObject;</div>"},{"id" : 1, "x" : 642, "y" : 123, "width" : 430, "height" : 511, "txt" : "<div>/**</div><div>&nbsp; &nbsp; The base class for all elements that appear in the game.</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function VisualGameObject()</div><div>{</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; The image that will be displayed by this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Image</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.image = null;</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Draws this element to the back buffer</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param dt Time in seconds since the last frame</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param context The context to draw to</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param xScroll The global scrolling value of the x axis &nbsp;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param yScroll The global scrolling value of the y axis &nbsp;</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; context.drawImage(this.image, this.x - xScroll, this.y - yScroll);</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param image The image to be displayed</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param x The position on the X axis</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param y The position on the Y axis</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>@param z The depth</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupVisualGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.startupGameObject(x, y, z);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.image = image;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Clean this object up</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.shutdownVisualGameObject = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.image = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownGameObject();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.shutdown = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.shutdownVisualGameObject();</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.collisionArea = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return new Rectangle().startupRectangle(this.x, this.y, this.image.width, this.image.height);</div><div>&nbsp; &nbsp; }</div><div>}</div><div>VisualGameObject.prototype = new GameObject;</div>"}], "connections" : []}