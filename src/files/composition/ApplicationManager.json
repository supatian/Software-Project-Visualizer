{"nodes" : [{"id" : 0, "x" : 254, "y" : 104, "width" : 370, "height" : 497, "txt" : "<div>/**</div><div>&nbsp; &nbsp; A manager for all the objects in the game</div><div>&nbsp; &nbsp; @author &lt;a href=\"mailto:matthewcasperson@gmail.com\"&gt;Matthew Casperson&lt;/a&gt;</div><div>&nbsp; &nbsp; @class</div><div>*/</div><div>function GameObjectManager()</div><div>{</div><div>&nbsp; &nbsp; /** An array of game objects&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.gameObjects = new Array();</div><div>&nbsp; &nbsp; /** An array of new game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addedGameObjects = new Array();</div><div>&nbsp; &nbsp; /** An array of removed game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Arary</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.removedGameObjects = new Array();</div><div>&nbsp; &nbsp; /** The time that the last frame was rendered &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Date</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.lastFrame = new Date().getTime();</div><div>&nbsp; &nbsp; /** The global scrolling value of the x axis &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.xScroll = 0;</div><div>&nbsp; &nbsp; /** The global scrolling value of the y axis &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.yScroll = 0;</div><div>&nbsp; &nbsp; /** A reference to the canvas element &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type HTMLCanvasElement</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.canvas = null;</div><div>&nbsp; &nbsp; /** A reference to the 2D context of the canvas element</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type CanvasRenderingContext2D</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.context2D = null;</div><div>&nbsp; &nbsp; /** A reference to the in-memory canvas used as a back buffer&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type HTMLCanvasElement</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.backBuffer = null;</div><div>&nbsp; &nbsp; /** A reference to the backbuffer 2D context&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type CanvasRenderingContext2D</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.backBufferContext2D = null;</div><div>&nbsp; &nbsp; /** True if the canvas element is supported, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.canvasSupported = false;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** True if the resources supplied to the ResourceManager are all loaded, false otherwise</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Boolean</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.resourcesLoaded = false;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** The current colour of the loading screen</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenCol = 0;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** The direction of the changes to the loading screen colour.</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>1 = colour moving towards white</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">        </span>-1 = colour moving topwards balck</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */<span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenColDirection = 1;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>/** How quickly to change the loading screen colour per second</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @type Number</div><div>&nbsp; &nbsp; */</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">    </span>this.loadingScreenColSpeed = 255;</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Initialises this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @return A reference to the initialised object</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.startupGameObjectManager = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // set the global pointer to reference this object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; g_GameObjectManager = this;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // watch for keyboard events</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.onkeydown = function(event){g_GameObjectManager.keyDown(event);}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.onkeyup = function(event){g_GameObjectManager.keyUp(event);}</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // get references to the canvas elements and their 2D contexts</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.canvas = document.getElementById('canvas');</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // if the this.canvas.getContext function does not exist it is a safe bet that</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the current browser does not support the canvas element.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // in this case we don't go any further, which will save some debuggers (like</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // the IE8 debugger) from throwing up a lot of errors.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.canvas.getContext)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.canvasSupported = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D = this.canvas.getContext('2d');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer = document.createElement('canvas');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer.width = this.canvas.width;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBuffer.height = this.canvas.height;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBufferContext2D = this.backBuffer.getContext('2d');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // create a new ResourceManager</div><div>&nbsp; &nbsp; &nbsp; &nbsp; new ResourceManager().startupResourceManager(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [{name: 'runLeft', src: 'run_left.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'runRight', src: 'run_right.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'idleLeft', src: 'idle_left.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'idleRight', src: 'idle_right.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background0', src: 'jsplatformer4_b0.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background1', src: 'jsplatformer4_b1.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'background2', src: 'jsplatformer4_b2.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'block', src: 'BlockA0.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'gem', src: 'Gem.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'mainmenu', src: 'mainmenu.png'},</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {name: 'portal', src: 'portal.png'}]);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; // use setInterval to call the draw function</div><div>&nbsp; &nbsp; &nbsp; &nbsp; setInterval(function(){g_GameObjectManager.draw();}, SECONDS_BETWEEN_FRAMES);</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return this; &nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; The render loop</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.draw = function ()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // calculate the time since the last frame</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var thisFrame = new Date().getTime();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var dt = (thisFrame - this.lastFrame)/1000;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.lastFrame = thisFrame;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (!this.resourcesLoaded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var numLoaded = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (i = 0; i &lt; g_ResourceManager.imageProperties.length; ++i)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (g_ResourceManager[g_ResourceManager.imageProperties[i]].complete)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ++numLoaded;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ( numLoaded == g_ResourceManager.imageProperties.length )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // create a new ApplicationManager</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"highlight\">new ApplicationManager(</span>).startupApplicationManager(this.canvas.width, this.canvas.height);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.resourcesLoaded = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol += this.loadingScreenColDirection * this.loadingScreenColSpeed * dt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.loadingScreenCol &gt; 255)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol = 255;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenColDirection = -1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if (this.loadingScreenCol &lt; 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenCol = 0;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadingScreenColDirection = 1;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.fillStyle = \"rgb(\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \",\" + parseInt(this.loadingScreenCol) + \")\";</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.fillRect (0, 0, this.canvas.width, this.canvas.height);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // clear the drawing contexts</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.canvasSupported &amp;&amp; this.resourcesLoaded)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.backBufferContext2D.clearRect(0, 0, this.backBuffer.width, this.backBuffer.height);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.addNewGameObjects();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.removeOldGameObjects();</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // first update all the game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].update)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].update(dt, this.backBufferContext2D, this.xScroll, this.yScroll);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // then draw the game objects</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].draw)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].draw(dt, this.backBufferContext2D, this.xScroll, this.yScroll);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // copy the back buffer to the displayed canvas</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.context2D.drawImage(this.backBuffer, 0, 0);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; };</div><div><br></div><div>&nbsp; &nbsp; this.shutdownAll = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].shutdown)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].shutdown();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.removeOldGameObjects();</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Adds a new GameObject to the gameObjects collection</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param gameObject The object to add</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.addGameObject = function(gameObject)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.addedGameObjects.push(gameObject);</div><div>&nbsp; &nbsp; };</div><div><br></div><div>&nbsp; &nbsp; this.addNewGameObjects = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.addedGameObjects.length != 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.addedGameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.push(this.addedGameObjects[x]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.addedGameObjects.clear();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.sort(function(a,b){return a.zOrder - b.zOrder;});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Removes a GameObject from the gameObjects collection</div><div>&nbsp; &nbsp; &nbsp; &nbsp; @param gameObject The object to remove</div><div>&nbsp; &nbsp; */</div><div>&nbsp; &nbsp; this.removeGameObject = function(gameObject)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.removedGameObjects.push(gameObject);</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.removeOldGameObjects = function()</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (this.removedGameObjects.length != 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.removedGameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects.removeObject(this.removedGameObjects[x]);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.removedGameObjects.clear();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.keyDown = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].keyDown)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].keyDown(event);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br></div><div>&nbsp; &nbsp; this.keyUp = function(event)</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (var x = 0; x &lt; this.gameObjects.length; ++x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this.gameObjects[x].keyUp)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.gameObjects[x].keyUp(event);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div>"}], "connections" : []}